[
  {
    "objectID": "project/04_project_report.html",
    "href": "project/04_project_report.html",
    "title": "Final Report",
    "section": "",
    "text": "The final written report for the project will be delivered to me and to your liaison. I can provide a color-printed copy for you to distribute to the liaison and for their offices. The final report is to be created in R Markdown and knit as a Pdf or Word document. An example starter file can be found here. You are not to write the document in GoogleDocs, or other sharing platforms. The course is designed for you to acquire new skills and build confidence in those skills. Investing in yourself is what will get you internships, jobs, and leadership roles in labs and lab manager roles in graduate school. Thus, the report is to be created in R Markdown and maintained in the remote repository. Because RStudio does not have grammar check capability, you are free to create your own personal content in a Word Processing software like MS Word before you add the content to R Markdown. However, I advise you change the font in that working file to sans serif font because R Markdown may get confused with certain characters (e.g., serif font apostrophes, etc.) and you may need to fix these issues later. After running your grammar and spelling check, then add the content to the .Rmd file. If you do work in a separate file, you will need to make sure to save this file to the project /report directory and ensure you push that file to the remote repository. Also, make sure you use your initials in the file name so that team members don’t all have the same file names.\nA code lead should take on the responsibility to save the file to /report in the team project, add, commit, and push the file to the remote repo on GitHub. Some team members will not be familiar with using Git and the code lead is responsible for ensuring the report file is in the final project repo. Therefore, when team members work on their respective report content, I recommend an easy approach:\n\nThe team decides to work independently in their own RStudio project (e.g., \"dataviz-exercises\") and perhaps make a copy of the main .Rmd document that include team member’s initials as a suffix to the filename). The team delegates the sections to be written by specific team members. Each member edits their file, saves it, and ensures they can knit an HTML (or Word) version of the file. If successful without error, then send the the sections to the team member responsible for integrating the work into a team report. That team member integrates the content and ensures they can can knit it. That file is then sent to all team members for review before is it sent to the code lead for adding to the team’s official RStudio project (and remote repo). There are certainly limitations with this approach if executed in haste. As long as the team plans accordingly, this approach should be fine.\nThe team work collaboratively using Box Edit, Docs in Proton Drive which is free and private, or GoogleDocs. However, due to Google Privacy Issues, you cannot use GoogleDocs without a written approval from your team’s liaison. All team members can see the written content and make edits. A limitation is that R code blocks, R in-line code, and plots would not be visible unless added to the document.\n\nNote: Remember that with a version control system like Git, you always have access to all versions of the files pushed to GitHub. You can always revert to a prior version. I can help you with this if you get to this point. Good messages in your commits will be helpful here."
  },
  {
    "objectID": "project/04_project_report.html#abstract",
    "href": "project/04_project_report.html#abstract",
    "title": "Final Report",
    "section": "Abstract",
    "text": "Abstract\nThe abstract provides a main summary of data, problem, methods, and key findings."
  },
  {
    "objectID": "project/04_project_report.html#contents",
    "href": "project/04_project_report.html#contents",
    "title": "Final Report",
    "section": "Contents",
    "text": "Contents\nA contents pages, or table of contents, provides a listing of the document sections and subsections as we as a page for location.\n\nTitle Page\nAbstract\nTable of Contents\nAcknowledgments\n\nChapters:\n\nIntroduction\nData\nResults/Findings\nDiscussion\nConclusion\nReferences"
  },
  {
    "objectID": "project/04_project_report.html#sources-of-data",
    "href": "project/04_project_report.html#sources-of-data",
    "title": "Final Report",
    "section": "Sources of Data",
    "text": "Sources of Data\nWhat was the data source/where did you obtain it from? Include the source URL of the website from which you accessed the data. Include information about where and how the data were collected or obtained. Specify whether the data were obtained from internal databases, external sources, or gathered through specific methods (surveys, sensors, web scraping, etc.)."
  },
  {
    "objectID": "project/04_project_report.html#data-characteristics",
    "href": "project/04_project_report.html#data-characteristics",
    "title": "Final Report",
    "section": "Data Characteristics",
    "text": "Data Characteristics\nDiscuss the data in detail. In which format was the data stored? How many cases were there in total? How many variables were contained? What variables were contained? What were the key variables you used?\nDescribe the types of variables present in the data set (numerical, categorical, text, etc.). When discussing variables of the visualization in the results chapter, make sure to provide clarity about the variable, its metric, and reason for using that variable (e.g., mean, max, median, mean of max values, median of max values, dispersion measures, etc.).\nList and briefly describe each attribute, feature, or variable in the data set, paying special attention to those used for the project."
  },
  {
    "objectID": "project/04_project_report.html#data-quality-and-data-preprocessing",
    "href": "project/04_project_report.html#data-quality-and-data-preprocessing",
    "title": "Final Report",
    "section": "Data Quality and Data Preprocessing",
    "text": "Data Quality and Data Preprocessing\nDescribe the steps taken to clean and prepare the data for investigation. This description may include removing duplicates, standardizing formats, trimming, correcting inconsistencies, etc. Explain any criteria used to select variables or features for visualization, focusing on those with the greatest impact or insight for the organization’s understanding.\nSome key details to address include:\n\nMissing Values: Explain the presence and treatment of any missing data. Explain how missing values were handled during analysis (removal, replacement, etc.).\nOutliers and Anomalies: Mention any identified outliers or anomalies and how they were addressed (treatment or exclusion).\nVariables Created: Describe the variables created, their units of measurement, etc. Explain if any normalization or scaling procedures applied to create the variables and to ensure data consistency and comparability across measures.\n\nAlso, specify where the cleaned data may be obtained."
  },
  {
    "objectID": "project/04_project_report.html#data-limitations",
    "href": "project/04_project_report.html#data-limitations",
    "title": "Final Report",
    "section": "Data Limitations",
    "text": "Data Limitations\nHighlight any limitations or constraints of the data set that affected the team’s ability to address the initial problem. Similarly, describe how any limitations might affect the interpretation of the findings."
  },
  {
    "objectID": "syllabus/syllabus.html",
    "href": "syllabus/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Semester\nFall 2024\n\n\nSection\nPSYC 167\n\n\nDay Time\nT/R 1:15-2:30 PM or 2:45-4:00PM (Pacific)\n\n\nLocation\nLocation: Roberts South, 102\n\n\nOffice Hours\nT/R: 12-1pm; Adams 110\n\n\nInstructor\nGabriel I. Cook\n\n\nContact\nDiscord (preferred) or Email: gcook@CMC.edu (please put ’PSYC 167 in subject line)\n\n\nCredit\n3 hours; 1 credits"
  },
  {
    "objectID": "syllabus/syllabus.html#course-details",
    "href": "syllabus/syllabus.html#course-details",
    "title": "Syllabus",
    "section": "",
    "text": "Semester\nFall 2024\n\n\nSection\nPSYC 167\n\n\nDay Time\nT/R 1:15-2:30 PM or 2:45-4:00PM (Pacific)\n\n\nLocation\nLocation: Roberts South, 102\n\n\nOffice Hours\nT/R: 12-1pm; Adams 110\n\n\nInstructor\nGabriel I. Cook\n\n\nContact\nDiscord (preferred) or Email: gcook@CMC.edu (please put ’PSYC 167 in subject line)\n\n\nCredit\n3 hours; 1 credits"
  },
  {
    "objectID": "syllabus/syllabus.html#course-description",
    "href": "syllabus/syllabus.html#course-description",
    "title": "Syllabus",
    "section": "Course Description",
    "text": "Course Description\nData visualization is the science and art of creating graphical representations of information and data. Visual representations provide accessible ways to see patterns, trends, and outliers in data. Variables like position, size, and orientation can focus attention and guide perception but can also bias interpretation of data. Students will learn how well-designed visualizations can reduce bias and improve comprehension for data thereby facilitating data-driven decision-making. Students will explore techniques for creating effective visualizations based on principles from cognitive and perceptual psychology, art, and design. Students will gain hands-on experience coding real-world data visualizations for local offices, organizations, and industry participants.\nThe course is targeted toward students with expressed interest in cognition and cognitive biases related to data communication, students interested in using visualization to communicate their own messages, and students interested in creating better visualization tools and systems. Students will engage in discussions of the readings, complete programming and data analysis assignments, and prepare a final project involving storytelling with data visualizations.\nPrerequisite: For data-science sequence or majors (level-A data-science course); recommended a course in Perception, Visual Attention, Cognitive Psychology, or Cognitive Science; or permission of instructor\n\nCourse Specific Learning Goals\n\nUnderstand various uses of visual variables to create data visualizations;\nUnderstand both advantages and disadvantages of using visual variables to create data visualizations;\nAnalyze, critique, and revise data visualizations;\nUnderstand the functionality of the ggplot2 library for creating data visualizations;\nPresent data with visual representations for your target audience, task, and data;\nIdentify appropriate data visualization techniques given particular requirements imposed by the data and/or audience; and\nApply appropriate design principles in the creation of presentations and visualizations\n\nThe following departmental learning goals will also be met: 1. Knowledge of major concepts in cognitive psychology; 2. Understanding of research methods in psychology, including research design, data analysis and interpretation; 3. Development of critical-thinking skills and use of the scientific approach to solve problems related to behavior and mental processes; 4. Oral and written communication skills."
  },
  {
    "objectID": "syllabus/syllabus.html#courses-at-cmc",
    "href": "syllabus/syllabus.html#courses-at-cmc",
    "title": "Syllabus",
    "section": "Courses at CMC",
    "text": "Courses at CMC\n\nFaculty Handbook 5.4.2 Work Load in Classes\n“Courses should involve approximately equal workloads. Generally, students should expect to spend from 6 to 8 hours per week, over and above the time spent in classroom, on each course.” – CMC Faculty Handbook\nIf you do the math, including class time of 2½ hours, you should expect to allocate 8 to 10 hours per week for courses at CMC. “Per week” is a key phrase; courses are not designed for nondistributed cramming."
  },
  {
    "objectID": "syllabus/syllabus.html#course-materials-and-textbook",
    "href": "syllabus/syllabus.html#course-materials-and-textbook",
    "title": "Syllabus",
    "section": "Course Materials and Textbook",
    "text": "Course Materials and Textbook\nAll of the course materials will be available on this course website .\nLink to the course website: https://gabrielcook.xyz/dataviz24/\n\nRequired Equipment:\nComputer: current Mac (macOS) or PC (Windows or Linux) with high-speed internet connection, capable of running R and RStudio; hard-drive space about 5 GB\n\n\nRequired Software:\nR and RStudio: Students will be required to use R and RStudio software. Note: Install Version will be provided. Before installing RStudio, you must also download and install the base R software at https://www.r-project.org/ that is appropriate for your computer’s operating system. RStudio can be downloaded for free at https://www.rstudio.com. You are expected to install R and RStudio on your personal computer by downloading the software from the links above. You will also have to install appropriate libraries throughout the course. Further instructions will be provided.\n\n\nReading Materials/Textbook(s)\nReading materials will be represented in the course modules and will be referenced there in. Some topics will require reading external to the module content, so make sure to check and plan accordingly.\nOther free and open-source materials on the topic that you might find interesting include:\n\nWickham, H., Navarro. D., & Pedersen, T. L. ggplot2: Elegant Graphics for Data Analysis, 3rd ed.*\nClaus O. Wilke (2019). Fundamentals of Data Visualization. O’Reilly Media.\nXie, Y., Allaire, J. J., & Grolemund, G. R Markdown: The Definitive Guide\nKieran Healy (2018). Data Visualization: A Practical Introduction. Princeton University Press.\nNordmann, E. & DeBruine, L. (2023). Applied Data Skills: Processing & Presenting Data (2023) . https://psyteachr.github.io/ads-v2"
  },
  {
    "objectID": "syllabus/syllabus.html#course-structure",
    "href": "syllabus/syllabus.html#course-structure",
    "title": "Syllabus",
    "section": "Course Structure",
    "text": "Course Structure\nStudents are expected to participate in all aspects of the class. This class involves developing topic knowledge and computer programming skills for visualizing data. The assumption is that students possess varying levels of skills related to programming. Class time will be spend engaging in a variety of tasks and activities, including lectures, group-work, applied coding activities, presentations, and discussions.\nThese textbooks are free and open-source."
  },
  {
    "objectID": "syllabus/syllabus.html#overview",
    "href": "syllabus/syllabus.html#overview",
    "title": "Syllabus",
    "section": "Overview",
    "text": "Overview\nStudents will read materials covering data-set relevant cognitive functions or abilities and tasks or tools used to measure those abilities. They will also will learn about coding in R, data validation and wrangling, and support their current knowledge of statistical probability and inference.\nCoding for Data Science: Students will be introduced to functional programming using R, application of models, and use of popular data-science libraries, (e.g., dplyr, ggplot, stringr, etc.). Students would learn elements of programming (e.g., assignment, functions, function arguments, operators, objects, passing objects, control flow, etc.).\nData Validation and Wrangling: Students will learn how to wrangle raw data, clean, and manipulate data. The course would involve both data wrangling and data cleaning. Students would learn main concepts of data sanitation of messy data, for example, how to clean, recode, de-dup, fix structural errors and typos, standardize data, etc. in service of applying machine-learning models.\nProject Management: Projects for academics and industry involve collaboration as well as organization of code and materials. Students will learn about and maintain a project with an organized directory structure both locally and remotely with collaborators using Git and GitHub.\nAcademic Integrity. Although you may find yourself working on assignments with a partner or discussing them with classmates, all assignments should be your one original work. You are not to share materials with other students if that material has the potential of being copied, even if your intention is not to allow a classmate to copy your work. Any signs of academic dishonesty will be submitted to the Academic Standards Committee for review. Although I do not anticipate any events of academic dishonesty, any form of dishonestly of any form will not be tolerated.\nMany students are unclear of the definition of plagiarism and for that reason I have posted some CMC links to information that I believe will clarify the issue. In addition, any work completed for another course, past or present, may not be submitted for a grade for this course. http://registrar.academic.claremontmckenna.edu/acpolicy/default.asp\nCourse Modules. This course will be split into modules, allocating various weeks depending on the scope of the module."
  },
  {
    "objectID": "syllabus/syllabus.html#course-structure-1",
    "href": "syllabus/syllabus.html#course-structure-1",
    "title": "Syllabus",
    "section": "Course Structure",
    "text": "Course Structure\nStudents are expected to participate in all aspects of the class. This class involves developing topic knowledge and computer programming skills for visualizing data. The assumption is that students possess varying levels of skills related to programming. Nevertheless, students are expected to attend class prepared to engage with and practice concepts related to readings and lectures. Prior to class, students should have completed course content (e.g., videos, modules, or readings referenced therein) and watched any associated lectures on the material. Class time will involve answering questions raised by students, a mini lecture, and coding activities that will inform the final project (note, concepts build). Homework assignments will also involved engagement with the project data. Class time will be spent engaging in a variety of tasks and activities, including lectures, group-work, applied coding activities, presentations, and discussions."
  },
  {
    "objectID": "syllabus/syllabus.html#course-schedule",
    "href": "syllabus/syllabus.html#course-schedule",
    "title": "Syllabus",
    "section": "Course Schedule",
    "text": "Course Schedule\n\n\n\n\n\n\n\n\n\n\n\n\nCalendar Date\nWeek Day\nModule Content\nHomework Assignment\nKnowledge Assessment\n\n\n\n\nDue By First Class\n\nInstallation & Setup\n\n\n\n\n27-Aug\nT\nIntroduction\n\n\n\n\n29-Aug\nR\nProject Management (Parts 1 and 2)\n\n\n\n\n03-Sept\nT\nGraphical Perception\n\n\n\n\n05-Sept\nR\nData Frame Manipulation and Wrangling\n\n\n\n\n10-Sept\nT\nData Subsets and Summaries\n\n\n\n\n12-Sept\nR\nConsiderations in Data Visualization\n\n\n\n\n17-Sept\nT\nDesigning Perceptually Efficient Visualizations\nHW 01\nKA 1\n\n\n19-Sept\nR\nThe Grammar of Graphics\n\n\n\n\n24-Sept\nT\nVisualizing Amounts\nHW 02\n\n\n\n26-Sept\nR\nVisualizing Associations\n\n\n\n\n01-Oct\nT\nSpatial Position and Adjustment\nHW 03\nKA 2\n\n\n03-Oct\nR\nColor Scales and Palettes\n\n\n\n\n08-Oct\nT\nHistograms and Density Plots\nHW 04\n\n\n\n10-Oct\nR\nCoordinates, Axes and Position Scales\n\n\n\n\n15-Oct\nT\nFall Break (no class)\n\n\n\n\n17-Oct\nR\nStatistical Transformations (Data as-is Versus Summaries)\n\n\n\n\n22-Oct\nT\nMore Data Wrangling\nHW 05\nKA 3\n\n\n24-Oct\nR\nMid-Term Presentation\n\n\n\n\n29-Oct\nT\nVisualizing More Distributions\nHW 06\n\n\n\n31-Oct\nR\nVisualizing Uncertainty\n\n\n\n\nNLT 31-Oct\n\nMid-Term Presentation to Liaison (By End of Day)\n\n\n\n\n05-Nov\nT\nLegends and Arrangement\nHW 07\nKA 4\n\n\n07-Nov\nR\nVisualizing Trends\n\n\n\n\n12-Nov\nT\nAnnotation and Text\nHW 08\n\n\n\n14-Nov\nR\nMulti-Panel Plots: Faceting and Layers\n\n\n\n\n19-Nov\nT\nAttentional Control and Tradeoffs\nHW 09\nKA 5\n\n\n21-Nov\nR\nTitles Captions & Tables\n\n\n\n\n26-Nov\nT\n[online] Catch-Up, Figure Design (Themes), or Team Project Preparation\nHW 10\n\n\n\n28-Nov\nR\nThanksgiving Break (no class)\n\n\n\n\n03-Dec\nT\nCatch-Up or Team Project Preparation\n\n\n\n\n05-Dec\nR\nIn-Class Presentation (Last day of Class)\n\n\n\n\nNLT13-Dec\nFri\nFinals Week: Final Push to Repo/Written Report (By Noon)\n\nMU\n\n\nNLT13-Dec\nFri\nFinal Presentation to Liaison (By End of Day) - Do Not Schedule your departure prior to presenting to your project’s organization, otherwise expect a grade deduction. The semester schedule and final-exam schedule were available during registration time.\n\n\n\n\nNote(s):\n\nAssessments will take place during the first 10 minutes of class time. If you are late and cannot finish in the time allotted, see below.\n\n\n\n\n\n\nThere will be 1 optional make-up/replacement assessment (MU) offered which can replace a missed assessment or homework or unsatisfactory assessment or homework. The percentage value (not point value) will be applied to items of unequal point value.\n\n\n\n\n\n\nNLT = No Later Than"
  },
  {
    "objectID": "syllabus/syllabus.html#assignments-and-grading",
    "href": "syllabus/syllabus.html#assignments-and-grading",
    "title": "Syllabus",
    "section": "Assignments and Grading",
    "text": "Assignments and Grading\nThis is an engagement and skills-acquisition based course. Students will have opportunities to strengthen skills outside of the classroom in preparation of performing class exercises related to the team project, take computer-free quizzes that involve writing and evaluating code and objects returned from code. Failure to engage in material or rely on ChatGPT or other AI tools will likely result in an inability to perform well on quizzes. The team project involves weekly data manipulation and visualization as well as presentations and a final deliverable.\nStudents are expected to make progress weekly on the team project by completing projects elements that are currently possible to complete (e.g., organizing the repo and its directories, editing the R Markdowns files, ensuring reproducibility, drafting background content, etc.). Procrastination on your part will bring you unnecessary stress and anxiety, a lower quality deliverable, and diffusion of responsibility that I was somehow responsible for your oversight. In turn, your frustration may result in lower course evaluations for me. I am fine with this.\n\nEvaluation and Grading\n\n\n\n\n\nItem\nTotal Points (%)\nPoints\n\n\n\n\nReadings & Videos (by class time)\n5%\n20\n\n\nIn-Class Knowledge Assessments\n20%\n80\n\n\nConceptual and Programming Homework\n20%\n80\n\n\nMidterm Presentation\n20%\n80\n\n\nFinal Project (Pres and Report)\n35%\n140\n\n\n\n\n\nPercentage grades are converted to letter grades according to the following rubric.\n\n\n\n\n\nLetter\n% Range\n\n\n\n\nA\n94 - 100\n\n\nA-\n90 - 93.99\n\n\nB+\n87 - 89.99\n\n\nB\n84 - 86.99\n\n\nB-\n80 - 83.99\n\n\nC+\n77 - 79.99\n\n\nC\n74 - 76.99\n\n\nC-\n70 - 73.99\n\n\nD+\n67 - 69.99\n\n\nD\n64 - 66.99\n\n\nD-\n60 - 63.99\n\n\nF\n0 - 59.99"
  },
  {
    "objectID": "syllabus/syllabus.html#attendance",
    "href": "syllabus/syllabus.html#attendance",
    "title": "Syllabus",
    "section": "Attendance",
    "text": "Attendance\nStudents are expected to attend and participate in each class. If you are unable to attend class, you need not provide any rationale or excuse. You are, however, responsible for submitting homework that is due for that day and for accepting the responsibility for missing assessments on that day. Class time will be used to address coding concerns, work through project-related exercises with your team, and practice coding to build skills. If you elect not to participate, please understand that decision will be reflected in class performance related to quality, professionalism, team contributions, etc."
  },
  {
    "objectID": "syllabus/syllabus.html#course-policies",
    "href": "syllabus/syllabus.html#course-policies",
    "title": "Syllabus",
    "section": "Course Policies",
    "text": "Course Policies\n\nDue dates\nDue dates are suggestions for completing coursework on a weekly basis. There is a lag with homework assignment content so that you are able to complete them early if desired. You may be able to work ahead but you are not encouraged to fall behind. Late homework will be reduced at 50%. \nYou should email me if you have an exceptional circumstance preventing you from taking an assessment during an assessment week.\n\n\nChanges to the syllabus\nThe syllabus may be updated for clarity or to make adjustments for pedagogical purposes. The most current version of the syllabus is always available from the course website.\n\n\nAccessibility\nI have a disability and understand your needs. In order to receive disability-related academic accommodations students should contact me for arrangements as per instruction from disability services.\n\n\nCorrespondence\nI may on occasion need to use e-mail but you should contact me on the Discord channel, which is where I will post announcements, changes, reminders, etc. You are responsible for monitoring Discord and e-mail regularly.\nIf you have questions, please message me on Discord.\nIf you need to e-mail me:\n\nAlways add ’PSYC 167” to the subject line\nemail me at: gcook@cmc.edu"
  },
  {
    "objectID": "syllabus/syllabus.html#college-policy-on-academic-integrity",
    "href": "syllabus/syllabus.html#college-policy-on-academic-integrity",
    "title": "Syllabus",
    "section": "College Policy on Academic Integrity",
    "text": "College Policy on Academic Integrity\nThe faculty and administration of Claremont McKenna College support an environment free from cheating and plagiarism. Each student is responsible for being aware of what constitutes cheating and plagiarism and for avoiding both.\n\nViolations of Academic integrity\nEach student is responsible for understanding and acting in accordance with the College’s policy on Academic Integrity, described below.\n\n\nAcademic Integrity\nAlthough you may find yourself working on assignments with a partner or discussing them with classmates, all assignments should be your one original work. You are not to share materials with other students if that material has the potential of being copied, even if your intention is not to allow a classmate to copy your work. Any signs of academic dishonesty, even those raised by concerned peers, will be submitted to the Academic Standards Committee for review. Although I do not anticipate any events of academic dishonesty, any form of dishonestly of any form will not be tolerated. Many students are unclear of the definition of plagiarism so I have posted some CMC links to information that I believe will clarify the issue. In addition, any work completed for another course, past or present, may not be submitted for a grade for this course and would be a violation of integrity. http://registrar.academic.claremontmckenna.edu/acpolicy/default.asp\n\nStatement of Reasonable Accommodations\nI have an eye disease and visual impairment and understand the need for accommodations. Your experience in this class is important to me. If you have already established accommodations with Disability & Accessibility Services at CMC, please communicate your approved accommodations to me during the first week of the semester so we can discuss your needs in this course ASAP. You can start this conversation by forwarding me your accommodation letter. If you have not yet established accommodations through Accessibility Services but have a temporary health condition or permanent disability (conditions include but are not limited to: mental health, attention-related, learning, vision, hearing, physical or health), you are encouraged to contact Assistant Dean for Disability Services & Academic Success, Kari Rood, at AccessibilityServices@cmc.edu to ask questions and/or begin the process. General information and accommodations request information be found at the CMC DOS Accessibility Service’s website. Please note that arrangements must be made with advance notice in order to access the reasonable accommodations. You are able to request accommodations from CMC Accessibility Services at any point in the semester. Be mindful that this process may take some time to complete and accommodations are not retroactive. I would err on the side of caution and make sure your accommodations are sent to me even if you do not believe you need them as some students only learn they may need time after completing assessment. The Americans With Disabilities Act (ADA) and Section 504 of the Rehabilitation Act do not make accommodations retroactive. If you are approved for extra testing time for example, you must do so before an electronic assessment is posted in order for it to be integrated into the assessment. Claremont McKenna College values creating inclusive and accessible learning environments consistent with federal and state law. If you are not a CMC student, please connect with the Disability & Accessibility Services Coordinator on your campus regarding a similar process.\n\n\n\nFYI on cheating etc.\nRemember, you are responsible for not cheating or violating CMC’s Academic Integrity Policy. You are responsible for understanding that policy, and for conducting yourself in a manner such that you do not violate the policy.\nThe above link lists many examples of cheating and plagiarism that are not allowed. There are many more specific acts that you should NOT do. Here is an additional list of activities that will be sufficient cause for immediate failure in the course.\n\nDo not take pictures of exam or quiz questions and share them with other students\nDo not give other students answers during an exam or quiz, or any other assignment that is an individual assignment\nDo not copy work from another source and submit it as your own\nDo not copy and paste text from the internet and submit it as your own words\nDo not copy and paste text and slightly alter wording to pass the work off as your own\nDo not hire someone else to do the coursework for you\nDo not copy and paste text into a paraphrasing app, and then submit the output of the paraphrasing app as your own work\nDo not copy random words from the internet that have nothing to do with the assignment and submit them as your own work.\nDo not work on individual assignments with other students, share answers or other material, and then all hand in versions of the same thing that are slightly different.\nDo not plagiarize yourself by submitting work that you have previously completed in another class.\n\n\n\nMandate to report violations\nIf a faculty member suspects a violation of academic integrity and, upon investigation, confirms that violation, or if the student admits the violation, the faculty member MUST report the violation. Students should be aware that faculty may use plagiarism detection software.\nThere is no excuse for cheating. Students who are caught cheating may receive a failing grade for the entire course. All students found to have violated the academic integrity will be sanctioned by the Academic Standards Committee."
  },
  {
    "objectID": "syllabus/syllabus.html#faq",
    "href": "syllabus/syllabus.html#faq",
    "title": "Syllabus",
    "section": "FAQ",
    "text": "FAQ\nIf you have questions about the syllabus, let’s talk about it in class, and/or please create a thread to discuss the question on Discord."
  },
  {
    "objectID": "slides/02_git_slides.html",
    "href": "slides/02_git_slides.html",
    "title": "Git and GitHub",
    "section": "",
    "text": "Project backup\nGit monitors/controls file versions (empty directories).\nSee specific changes inside files\nUndo changes (time machine)\nVersion Control Summary Video\n\n\n\n\n\nThere are 4 main parts to Git Workflow:\n\n\nMake local changes (in your working directory)\nStage changes (in your staging directory)\nCommit changes (to apply them for pushing to your remote repository)\nPush for sending commits to remote repo (on GitHub)\n\n\nOther: Merge for merging branches (i.e., to incorporate your edits into main)\nVideo of Version Control Workflow Basics\n\n\n\n## **Git: Image Version**\n\n@[understanding git through images](https://dev.to/nopenoshishi/understanding-git-through-images-4an1)"
  },
  {
    "objectID": "slides/02_git_slides.html#what-is-version-control-for",
    "href": "slides/02_git_slides.html#what-is-version-control-for",
    "title": "Git and GitHub",
    "section": "",
    "text": "Project backup\nGit monitors/controls file versions (empty directories).\nSee specific changes inside files\nUndo changes (time machine)\nVersion Control Summary Video"
  },
  {
    "objectID": "slides/02_git_slides.html#version-control-git-workflow-basics",
    "href": "slides/02_git_slides.html#version-control-git-workflow-basics",
    "title": "Git and GitHub",
    "section": "",
    "text": "There are 4 main parts to Git Workflow:\n\n\nMake local changes (in your working directory)\nStage changes (in your staging directory)\nCommit changes (to apply them for pushing to your remote repository)\nPush for sending commits to remote repo (on GitHub)\n\n\nOther: Merge for merging branches (i.e., to incorporate your edits into main)\nVideo of Version Control Workflow Basics\n\n\n\n## **Git: Image Version**\n\n@[understanding git through images](https://dev.to/nopenoshishi/understanding-git-through-images-4an1)"
  },
  {
    "objectID": "slides/02_git_slides.html#connecting-git-to-github-the-rstudio-terminal",
    "href": "slides/02_git_slides.html#connecting-git-to-github-the-rstudio-terminal",
    "title": "Git and GitHub",
    "section": "Connecting Git to GitHub: The RStudio Terminal",
    "text": "Connecting Git to GitHub: The RStudio Terminal\n\n\nConfigure Git and GitHub in RStudio Terminal\nCreate token\nSet token\nCan use the RStudio Gui (clunky though)"
  },
  {
    "objectID": "slides/02_git_slides.html#configuring-git-and-github-with-usethis",
    "href": "slides/02_git_slides.html#configuring-git-and-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Configuring Git and GitHub with {usethis}",
    "text": "Configuring Git and GitHub with {usethis}\n\nusethis::use_git_config(user.name = \"janegit\", \n                        user.email = \"jane_git@gitrdone.com\"\n                        )"
  },
  {
    "objectID": "slides/02_git_slides.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "href": "slides/02_git_slides.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Creating a Personal Access Token (PAT) for GitHub with {usethis}",
    "text": "Creating a Personal Access Token (PAT) for GitHub with {usethis}\n\n\nusethis::create_github_token()\nCreate token and copy to your clipboard"
  },
  {
    "objectID": "slides/02_git_slides.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "href": "slides/02_git_slides.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "title": "Git and GitHub",
    "section": "Setting your Git Credentials (using PAT) with {gitcreds}",
    "text": "Setting your Git Credentials (using PAT) with {gitcreds}\n\n\ngitcreds::gitcreds_set()\nChoose option to either set or replace\nAt ? Enter new password or token, paste PAT to set\ngh::gh_whoami() to check if set"
  },
  {
    "objectID": "slides/02_git_slides.html#some-basic-commands",
    "href": "slides/02_git_slides.html#some-basic-commands",
    "title": "Git and GitHub",
    "section": "Some Basic Commands",
    "text": "Some Basic Commands\n\nFork: to make a copy of a repo in your own GitHub account\nClone: make a copy of the your GitHub repo on your local computer. * copies a remote repo to create a local repo with a remote called origin automatically set up."
  },
  {
    "objectID": "slides/02_git_slides.html#some-basic-commands-cont.",
    "href": "slides/02_git_slides.html#some-basic-commands-cont.",
    "title": "Git and GitHub",
    "section": "Some Basic Commands (Cont.)",
    "text": "Some Basic Commands (Cont.)\n\nPull: incorporates changes into your repo from remote\nAdd: adds snapshots of your changes to the “Staging” area.\nCommit: takes the files as they are in your staging area and stores a snap shot of your files (changes) permanently in your Git directory\nPush: uploads your files (changes) to the remote repo\nStatus: checks the status of a repo changes, etc."
  },
  {
    "objectID": "slides/02_git_slides.html#some-basic-commands-cont.-1",
    "href": "slides/02_git_slides.html#some-basic-commands-cont.-1",
    "title": "Git and GitHub",
    "section": "Some Basic Commands (Cont.)",
    "text": "Some Basic Commands (Cont.)\n\nMerge: incorporates changes into the branch you are on.\nPull Request: By “issuing a pull request” to the owner of the upstream repo, you are requesting that your changes be pulled into their repo (accept your changes/work)."
  },
  {
    "objectID": "slides/02_git_slides.html#making-local-file-changes-committing-and-pushing-to-github",
    "href": "slides/02_git_slides.html#making-local-file-changes-committing-and-pushing-to-github",
    "title": "Git and GitHub",
    "section": "Making Local File Changes, Committing, and Pushing to GitHub",
    "text": "Making Local File Changes, Committing, and Pushing to GitHub\n\n\nMake a change to a file, save to local computer\nCheck status of project for changes\nAdd/Stage change\nCommit change(s)\nPush changes\nPull pulls changes down from repo (downloads and merges changes)"
  },
  {
    "objectID": "slides/02_git_slides.html#checking-the-status-of-local-file-changes",
    "href": "slides/02_git_slides.html#checking-the-status-of-local-file-changes",
    "title": "Git and GitHub",
    "section": "Checking the Status of Local File Changes",
    "text": "Checking the Status of Local File Changes\nAt the Terminal in RStudio\n\n$ git status"
  },
  {
    "objectID": "slides/02_git_slides.html#shared-repository-workflow",
    "href": "slides/02_git_slides.html#shared-repository-workflow",
    "title": "Git and GitHub",
    "section": "Shared Repository Workflow",
    "text": "Shared Repository Workflow\n\n\nPull recent changes from main: git pull\nMake changes to files\nStage your changes: git add\nCommit changes locally: git commit -m \"description of changes\"\nUpload your new the changes to GitHub: git push"
  },
  {
    "objectID": "slides/02_git_slides.html#staging-changes-adding-changes",
    "href": "slides/02_git_slides.html#staging-changes-adding-changes",
    "title": "Git and GitHub",
    "section": "Staging Changes (Adding Changes)",
    "text": "Staging Changes (Adding Changes)\n\n\nStaging and Committing\n\nUntracked vs. tracked files\nTo have tracked by Git, you need to add"
  },
  {
    "objectID": "slides/02_git_slides.html#staging-a-specific-change",
    "href": "slides/02_git_slides.html#staging-a-specific-change",
    "title": "Git and GitHub",
    "section": "Staging a Specific Change",
    "text": "Staging a Specific Change\n\n\n$ git add &lt;file&gt;... such that &lt;file&gt; refers to the file name\nfile might be in a directory, e.g., r/\n$ git add r/yourname.R\nTab to auto-complete, e.g., git add r/you{TAB}"
  },
  {
    "objectID": "slides/02_git_slides.html#staging-all-changes",
    "href": "slides/02_git_slides.html#staging-all-changes",
    "title": "Git and GitHub",
    "section": "Staging All Changes",
    "text": "Staging All Changes\n\n$ git add ."
  },
  {
    "objectID": "slides/02_git_slides.html#committing-the-changes",
    "href": "slides/02_git_slides.html#committing-the-changes",
    "title": "Git and GitHub",
    "section": "Committing the Change(s)",
    "text": "Committing the Change(s)\n\n\ngit commit is used to commit the changes\nadd -m to tell git you want a message (e.g., \"my message here\")\n\n$ git commit -m \"added my first .R file\""
  },
  {
    "objectID": "slides/02_git_slides.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "href": "slides/02_git_slides.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Push (publish) the change(s) from your branch to the remote repository",
    "text": "Push (publish) the change(s) from your branch to the remote repository\n\n\n$ git push\nPushing changes"
  },
  {
    "objectID": "slides/02_git_slides.html#pulls-changes-from-the-remote-repository",
    "href": "slides/02_git_slides.html#pulls-changes-from-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Pulls change(s) from the remote repository",
    "text": "Pulls change(s) from the remote repository\n\n\n$ git pull\nIf you make changes that other will need, let them know to pull"
  },
  {
    "objectID": "slides/02_git_slides.html#git-client-video-tutorials",
    "href": "slides/02_git_slides.html#git-client-video-tutorials",
    "title": "Git and GitHub",
    "section": "Git Client Video Tutorials",
    "text": "Git Client Video Tutorials\n\n\nGitKraken Git Client examples\nfor more, see: this video"
  },
  {
    "objectID": "slides/02_git_slides.html#videos-of-many-things-you-can-do",
    "href": "slides/02_git_slides.html#videos-of-many-things-you-can-do",
    "title": "Git and GitHub",
    "section": "Videos of many things you can do",
    "text": "Videos of many things you can do\nIf interested, see gittower YouTube"
  },
  {
    "objectID": "slides/023_git.html",
    "href": "slides/023_git.html",
    "title": "Git and GitHub",
    "section": "",
    "text": "What is version control?\n\nProject backup\nSee specific changes inside files\nUndo changes (time machine)\n\nVersion Control Summary Video"
  },
  {
    "objectID": "slides/023_git.html#version-control",
    "href": "slides/023_git.html#version-control",
    "title": "Git and GitHub",
    "section": "",
    "text": "What is version control?\n\nProject backup\nSee specific changes inside files\nUndo changes (time machine)\n\nVersion Control Summary Video"
  },
  {
    "objectID": "slides/023_git.html#version-control-git-workflow-basics",
    "href": "slides/023_git.html#version-control-git-workflow-basics",
    "title": "Git and GitHub",
    "section": "Version Control: Git Workflow Basics",
    "text": "Version Control: Git Workflow Basics\nThere are three main parts to Git Workflow:\n\n\nVersion control for files (not empty directories)\nMake local changes (in your working directory)\nStage changes (in your staging directory)\nCommit changes (to apply them for pushing to your remote repository)\nVersion Control Workflow Basics"
  },
  {
    "objectID": "slides/023_git.html#connecting-git-to-github-the-rstudio-terminal",
    "href": "slides/023_git.html#connecting-git-to-github-the-rstudio-terminal",
    "title": "Git and GitHub",
    "section": "Connecting Git to GitHub: The RStudio Terminal",
    "text": "Connecting Git to GitHub: The RStudio Terminal\n\n\nConfigure Git and GitHub in RStudio Terminal\nCreate token\nSet token\nCan use the RStudio Gui (clunky though)"
  },
  {
    "objectID": "slides/023_git.html#configuring-git-and-github-with-usethis",
    "href": "slides/023_git.html#configuring-git-and-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Configuring Git and GitHub with {usethis}",
    "text": "Configuring Git and GitHub with {usethis}\n\nusethis::use_git_config(user.name = \"janegit\", \n                        user.email = \"jane_git@gitrdone.com\"\n                        )"
  },
  {
    "objectID": "slides/023_git.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "href": "slides/023_git.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Creating a Personal Access Token (PAT) for GitHub with {usethis}",
    "text": "Creating a Personal Access Token (PAT) for GitHub with {usethis}\n\n\nusethis::create_github_token()\nCreate token and copy to your clipboard"
  },
  {
    "objectID": "slides/023_git.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "href": "slides/023_git.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "title": "Git and GitHub",
    "section": "Setting your Git Credentials (using PAT) with {gitcreds}",
    "text": "Setting your Git Credentials (using PAT) with {gitcreds}\n\n\ngitcreds::gitcreds_set()\nChoose option to either set or replace\nAt ? Enter new password or token, paste PAT to set\ngh::gh_whoami() to check if set"
  },
  {
    "objectID": "slides/023_git.html#making-local-file-changes-committing-and-pushing-to-github",
    "href": "slides/023_git.html#making-local-file-changes-committing-and-pushing-to-github",
    "title": "Git and GitHub",
    "section": "Making Local File Changes, Committing, and Pushing to GitHub",
    "text": "Making Local File Changes, Committing, and Pushing to GitHub\n\n\nMake a change to a file\nCheck status of project for changes\nStage change\nCommit all changes\nPush changes\nCommit a specific change\nPull changes down from repo (downloads and integrates changes)\nFetch downloads new data (does not change your working copy)"
  },
  {
    "objectID": "slides/023_git.html#checking-the-status-of-local-file-changes",
    "href": "slides/023_git.html#checking-the-status-of-local-file-changes",
    "title": "Git and GitHub",
    "section": "Checking the status of local file changes",
    "text": "Checking the status of local file changes\nAt the Terminal in RStudio\n\n$ git status"
  },
  {
    "objectID": "slides/023_git.html#staging-changes-adding-changes",
    "href": "slides/023_git.html#staging-changes-adding-changes",
    "title": "Git and GitHub",
    "section": "Staging Changes (Adding Changes)",
    "text": "Staging Changes (Adding Changes)\n\n\nStaging and Committing\n\nUntracked vs. tracked files\nTo have tracked by Git, you need to add"
  },
  {
    "objectID": "slides/023_git.html#staging-a-specific-change",
    "href": "slides/023_git.html#staging-a-specific-change",
    "title": "Git and GitHub",
    "section": "Staging a Specific Change",
    "text": "Staging a Specific Change\n\n\n$ git add &lt;file&gt;... such that &lt;file&gt; refers to the file name\nfile might be in a directory, e.g., r/\n$ git add r/yourname.R\nTab to auto-complete, e.g., git add r/you{TAB}"
  },
  {
    "objectID": "slides/023_git.html#staging-all-changes",
    "href": "slides/023_git.html#staging-all-changes",
    "title": "Git and GitHub",
    "section": "Staging All Changes",
    "text": "Staging All Changes\n\n$ git add ."
  },
  {
    "objectID": "slides/023_git.html#committing-the-changes",
    "href": "slides/023_git.html#committing-the-changes",
    "title": "Git and GitHub",
    "section": "Committing the Change(s)",
    "text": "Committing the Change(s)\n\n\ngit commit is used to commit the changes\nadd -m to tell git you want a message (e.g., \"my message here\")\n\n$ git commit -m \"added my first .R file\""
  },
  {
    "objectID": "slides/023_git.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "href": "slides/023_git.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Push (publish) the change(s) from your branch to the remote repository",
    "text": "Push (publish) the change(s) from your branch to the remote repository\n\n\n$ git push\nPushing changes"
  },
  {
    "objectID": "slides/023_git.html#pulls-changes-from-the-remote-repository",
    "href": "slides/023_git.html#pulls-changes-from-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Pulls change(s) from the remote repository",
    "text": "Pulls change(s) from the remote repository\n\n\n$ git pull\nIf you make changes that other will need, let them know to pull"
  },
  {
    "objectID": "slides/023_git.html#fetch-changes",
    "href": "slides/023_git.html#fetch-changes",
    "title": "Git and GitHub",
    "section": "Fetch changes",
    "text": "Fetch changes"
  },
  {
    "objectID": "slides/023_git.html#video-tutorials",
    "href": "slides/023_git.html#video-tutorials",
    "title": "Git and GitHub",
    "section": "Video Tutorials",
    "text": "Video Tutorials\n\n\nGitKraken Git Client examples\nfor more, see: this video"
  },
  {
    "objectID": "slides/023_git.html#videos-of-many-things-you-can-do",
    "href": "slides/023_git.html#videos-of-many-things-you-can-do",
    "title": "Git and GitHub",
    "section": "Videos of many things you can do",
    "text": "Videos of many things you can do\nIf interested, see gittower YouTube"
  },
  {
    "objectID": "schedule/index.html",
    "href": "schedule/index.html",
    "title": "Schedule",
    "section": "",
    "text": "Calendar Date\nWeek Day\nModule Content\nHomework Assignment\nKnowledge Assessment\n\n\n\n\nDue By First Class\n\nInstallation & Setup\n\n\n\n\n27-Aug\nT\nIntroduction\n\n\n\n\n29-Aug\nR\nProject Management (Parts 1 and 2)\n\n\n\n\n03-Sept\nT\nGraphical Perception\n\n\n\n\n05-Sept\nR\nData Frame Manipulation and Wrangling\n\n\n\n\n10-Sept\nT\nData Subsets and Summaries\n\n\n\n\n12-Sept\nR\nConsiderations in Data Visualization\n\n\n\n\n17-Sept\nT\nDesigning Perceptually Efficient Visualizations\nHW 01\nKA 1\n\n\n19-Sept\nR\nThe Grammar of Graphics\n\n\n\n\n24-Sept\nT\nVisualizing Amounts\nHW 02\n\n\n\n26-Sept\nR\nVisualizing Associations\n\n\n\n\n01-Oct\nT\nSpatial Position and Adjustment\nHW 03\nKA 2\n\n\n03-Oct\nR\nColor Scales and Palettes\n\n\n\n\n08-Oct\nT\nHistograms and Density Plots\nHW 04\n\n\n\n10-Oct\nR\nCoordinates, Axes and Position Scales\n\n\n\n\n15-Oct\nT\nFall Break (no class)\n\n\n\n\n17-Oct\nR\nStatistical Transformations (Data as-is Versus Summaries)\n\n\n\n\n22-Oct\nT\nMore Data Wrangling\nHW 05\nKA 3\n\n\n24-Oct\nR\nMid-Term Presentation\n\n\n\n\n29-Oct\nT\nVisualizing More Distributions\nHW 06\n\n\n\n31-Oct\nR\nVisualizing Uncertainty\n\n\n\n\nNLT 31-Oct\n\nMid-Term Presentation to Liaison (By End of Day)\n\n\n\n\n05-Nov\nT\nLegends and Arrangement\nHW 07\nKA 4\n\n\n07-Nov\nR\nVisualizing Trends\n\n\n\n\n12-Nov\nT\nAnnotation and Text\nHW 08\n\n\n\n14-Nov\nR\nMulti-Panel Plots: Faceting and Layers\n\n\n\n\n19-Nov\nT\nAttentional Control and Tradeoffs\nHW 09\nKA 5\n\n\n21-Nov\nR\nTitles Captions & Tables\n\n\n\n\n26-Nov\nT\n[online] Catch-Up, Figure Design (Themes), or Team Project Preparation\nHW 10\n\n\n\n28-Nov\nR\nThanksgiving Break (no class)\n\n\n\n\n03-Dec\nT\nCatch-Up or Team Project Preparation\n\n\n\n\n05-Dec\nR\nIn-Class Presentation (Last day of Class)\n\n\n\n\nNLT13-Dec\nFri\nFinals Week: Final Push to Repo/Written Report (By Noon)\n\nMU\n\n\nNLT13-Dec\nFri\nFinal Presentation to Liaison (By End of Day) - Do Not Schedule your departure prior to presenting to your project’s organization, otherwise expect a grade deduction. The semester schedule and final-exam schedule were available during registration time.\n\n\n\n\nNote(s):\n\nAssessments will take place during the first 10 minutes of class time. If you are late and cannot finish in the time allotted, see below.\n\n\n\n\n\n\nThere will be 1 optional make-up/replacement assessment (MU) offered which can replace a missed assessment or homework or unsatisfactory assessment or homework. The percentage value (not point value) will be applied to items of unequal point value.\n\n\n\n\n\n\nNLT = No Later Than"
  },
  {
    "objectID": "project/index.html",
    "href": "project/index.html",
    "title": "Project",
    "section": "",
    "text": "For the project, your team will write code in order to prepare, model, and visualize data in order to communicate a story that would address the question(s) proposed by the participating body (viz., liaison). Each project will differ but there will be similarities across projects, for example, cleaning data, managing variables, creating data summaries, creating visualizations, telling a coherent story, etc.\nEach project has a primary goal which is necessary to include for the final deliverable. If the team can adequately deliver the primary goal, additional goals can be worked on by eager teams. There may be exploratory components, which would allow for a healthy dose of flexibility in team creativity. Exploratory elements, however, should be discussed carefully with project liaisons."
  },
  {
    "objectID": "project/index.html#project-description",
    "href": "project/index.html#project-description",
    "title": "Project",
    "section": "",
    "text": "For the project, your team will write code in order to prepare, model, and visualize data in order to communicate a story that would address the question(s) proposed by the participating body (viz., liaison). Each project will differ but there will be similarities across projects, for example, cleaning data, managing variables, creating data summaries, creating visualizations, telling a coherent story, etc.\nEach project has a primary goal which is necessary to include for the final deliverable. If the team can adequately deliver the primary goal, additional goals can be worked on by eager teams. There may be exploratory components, which would allow for a healthy dose of flexibility in team creativity. Exploratory elements, however, should be discussed carefully with project liaisons."
  },
  {
    "objectID": "project/index.html#team-membership-and-roles",
    "href": "project/index.html#team-membership-and-roles",
    "title": "Project",
    "section": "Team Membership and Roles",
    "text": "Team Membership and Roles\nA team of students will work with a project liaison to develop the project and work together to produce the midterm and final deliverables. Rather than having all students in charge of all duties, team members should consider delegating tasks and various types of workloads to students who are best equipped to handle them either because of ability or because of interest and desire. Teams are to meet weekly and members are to complete individual work log reports, which are used for final grading."
  },
  {
    "objectID": "project/index.html#team-meetings",
    "href": "project/index.html#team-meetings",
    "title": "Project",
    "section": "Team Meetings",
    "text": "Team Meetings\nTeam meetings will be weekly and in-person. The team will determine when all members can meet at the same time each week to discuss their weekly accomplishments, upcoming goals, setbacks, etc. The PM will share with me the time and the location of the meeting."
  },
  {
    "objectID": "project/index.html#deliverables",
    "href": "project/index.html#deliverables",
    "title": "Project",
    "section": "Deliverables",
    "text": "Deliverables\n\nMidterm Presentation\nFinal Presentation\nFinal R Markdown Report and pdf\nWork logs/GitHub commits"
  },
  {
    "objectID": "project/index.html#project-evaluation",
    "href": "project/index.html#project-evaluation",
    "title": "Project",
    "section": "Project Evaluation",
    "text": "Project Evaluation\nThe project has different components representing it at various stages (e.g., midterm presentation, final presentation and report). See those sections specifically but the following general items will be important to consider.\n\nQuality of project deliverable documents (e.g., organization, coherence, story, coding clarity/organization, plots, etc.)\nProfessionalism (e.g., liaison meeting etiquette and responsibility, timely discord communication, non-tardy attendance at weekly team meeting, weekly work logs, feedback from liaison, etc.)\nPeer evaluation (e.g., contributions, team player, etc.)\n\nNote: Liaison’s will also participate in evaluating all teams. The team with the most impressive project (e.g., most clear, most useful and actionable, most interesting, most thought provoking, etc.) will receive bonus points.\n\nPresentation Characteristics\nSee the midterm and final presentation guidelines for more detail and rubric but in general, the following characteristics will be evaluated.\n\nClarity: well-explained; easy to follow/understand; ability to communicate points effectively\nOrganization: structured logically; ability to walk audience through the data journey and communicate a story interpretation about data\nThoroughness: all relevant issues discussed thoroughly\nPresentation Style: degree of preparedness and polish in presentation; smooth and rehearsed; minimum of reading; well-paced; slide quality"
  },
  {
    "objectID": "project/index.html#weekly-work-logreport",
    "href": "project/index.html#weekly-work-logreport",
    "title": "Project",
    "section": "Weekly Work log/Report",
    "text": "Weekly Work log/Report\nTracking individual and team goals weekly ensures progress toward the goal, commitment to the project, accountability for oneself, and a record of accomplishments.\nThe Project Manager should inquire with the team about the best way to submit work logs or transparency and review. This could be a Google Doc File, a spreadsheet, or even a Google From that contains questions to answer, which then get dumped into a Google Spreadsheet for all to review.\n\nFrequency of Work log\nWork logs are to be completed by end-of-day following the team meeting, after communicating future goals (distributed equally) to other team members. Please make public for me to review. Meetings should be physical to facilitate team cohesion and conversation, and limit silly technical issues that just waste meeting time.\n\n\nContents of Work log\nWork logs should contain information about the reporting date (or be interactive as needed daily as with a Kanban), the team member reporting, that member’s previous week accomplishments, and that member’s future week goals. A recurring week Kanban spreadsheet would take care of this for each week of the project.\nA Kanban template for projects is located here. You are not required to use this form of work log but some teams have found it useful in the past so I have created one based on the nature of the class project. I have added fields that are relevant to your project so that team members can log work by week. You can certainly modify or add more fields on the Key sheet.\nAnother recommended work log is accessible here. This is a work log file distributed to DS180 Capstone Faculty to share with their teams but I find it a little more clunky than than Kanban."
  },
  {
    "objectID": "project/05_project_tasks.html",
    "href": "project/05_project_tasks.html",
    "title": "Project Tasks",
    "section": "",
    "text": "Important\n\n\n\nDo not proceed. I need to edit this for PSYC167. If you see this message, feel free to remind me that the edits are not on the website.\n\n\n\n\nOverview\nIn order to complete the project, there are different components that can be easily broken up and delegated among team members. During weekly team meetings, team members can discuss accomplishments and progress, and check off tasks. Provided many of you have never taken on such tasks and thought about how to break tasks into smaller bite-sized pieces, a general framework maybe be helpful for you.\n\n\nLarge-Scale Tasks\nSome tasks have to be performed in a sequential order but others can be integrated throughout other tasks. For example, describing the motivation of the project, explaining the data and variables used, describing how you prepared the data, presenting findings, etc. are all part of the Report Drafting process. Components can be, and should be, worked on in piecemeal so that they are all not delayed until the end.\n\nReview the project proposal details shared with you in the project /docs\nReview any project documents in /docs to understand the structure of the data and identify relevant variables\nSchedule to meet with liaison to discuss project in order to formulate a game plan; ask about variables of interest\nOutline the project plan and develop a timeline (consider how timeline maps onto course topics)\nRead data, clean and prepare data for summaries, visualizations, and models\nMerge data parts from team members\nIntegrate team member sub-goal code files\nFinalize report\n\nReport drafting. This tasks can get integrated within the other tasks. For example, delegating tasks, setting deadlines for rough drafts, etc.). Relevant references in /refs can be disseminated, read, and used to prepare the theoretical and conceptual motivation for the project."
  },
  {
    "objectID": "project/06_using_git_with_branches.html",
    "href": "project/06_using_git_with_branches.html",
    "title": "Git Branch Merging Tutorial",
    "section": "",
    "text": "This tutorial covers how to merge a remote Git branch (one on the remote repository at GitHub.com) into a local branch (one on your local computer) without creating a local copy of that remote branch. This approach is especially useful when collaborating on a project where each team member is working on separate branches. Moreover, this approach limits temptation of working on the main branch and/or forgetting to switch off that main branch.\nFor this reference guide, you will work only on your personal feature branch. This of course, involves creating your branch locally on your computer inside your RStudio project for your team’s project.\nYour team’s final R Markdown report file (.Rmd) will be lightweight and not visually bulky. You and your team members will write text mostly in that file and use relevant inline commands when necessary but primarily add few lines of code that will call .R script files (think starter_script.R) to perform the heavy lifting of the project report. By doing so, your report will be reproducible from beginning to end especially if you write your code flexibly to handle any new NAs in vectors that do not currently exist in the data set. In order to achieve this goal, you will need a lean .Rmd report file that leverages more complicated code manipulation. This approach will also force you to think intentionally about the goad of each script your write and in the end you will have clean, readable code files that are clear to others about their specific goals.\nFor example, your team will source() many script files and embed your desired data visualizations into the report using knitr::include_graphics(). When you wish not to include something, you can comment out those lines easily.\nIn order for you to utilize the script files, data files, and other files created by your team members, you will manage them using Git. Your commit history and files created by you will become part of the repository record and will be used to evaluate your contributions to the overall project. To achieve this, you will work on your own branch and integrate/merge other team member’s branch history into your own branch. The final step is to merge the branches (or more easily, the Code Lead’s branch) into the main branch for the final product deliverable package."
  },
  {
    "objectID": "project/06_using_git_with_branches.html#overview",
    "href": "project/06_using_git_with_branches.html#overview",
    "title": "Git Branch Merging Tutorial",
    "section": "",
    "text": "This tutorial covers how to merge a remote Git branch (one on the remote repository at GitHub.com) into a local branch (one on your local computer) without creating a local copy of that remote branch. This approach is especially useful when collaborating on a project where each team member is working on separate branches. Moreover, this approach limits temptation of working on the main branch and/or forgetting to switch off that main branch.\nFor this reference guide, you will work only on your personal feature branch. This of course, involves creating your branch locally on your computer inside your RStudio project for your team’s project.\nYour team’s final R Markdown report file (.Rmd) will be lightweight and not visually bulky. You and your team members will write text mostly in that file and use relevant inline commands when necessary but primarily add few lines of code that will call .R script files (think starter_script.R) to perform the heavy lifting of the project report. By doing so, your report will be reproducible from beginning to end especially if you write your code flexibly to handle any new NAs in vectors that do not currently exist in the data set. In order to achieve this goal, you will need a lean .Rmd report file that leverages more complicated code manipulation. This approach will also force you to think intentionally about the goad of each script your write and in the end you will have clean, readable code files that are clear to others about their specific goals.\nFor example, your team will source() many script files and embed your desired data visualizations into the report using knitr::include_graphics(). When you wish not to include something, you can comment out those lines easily.\nIn order for you to utilize the script files, data files, and other files created by your team members, you will manage them using Git. Your commit history and files created by you will become part of the repository record and will be used to evaluate your contributions to the overall project. To achieve this, you will work on your own branch and integrate/merge other team member’s branch history into your own branch. The final step is to merge the branches (or more easily, the Code Lead’s branch) into the main branch for the final product deliverable package."
  },
  {
    "objectID": "project/06_using_git_with_branches.html#feature-branches",
    "href": "project/06_using_git_with_branches.html#feature-branches",
    "title": "Git Branch Merging Tutorial",
    "section": "Feature Branches",
    "text": "Feature Branches\nFeature branches are used to manage and create separate elements of development projects. Typically, separate branches are created for each specific feature or task a specific developer is coding. Using individual branches allows developers to work independently on new features without affecting the main codebase until the feature is complete and ready to be integrated. Once the feature in created, a new branch would be created for developing a new feature.\nFor your team project, rather than create a new branch for each feature (e.g., data wrangling task, plot tasks, etc.), each team member can code all of their features in a single branch. If, however, you prefer to separate all tasks into branches, you may do so. For, example, create a jane-data-cleaning branch for cleaning data, a jane-data-summary-by-year branch for creating a specific data summary, and a jane-bar-plot-revenue branch for creating visualizations for revenue. The down side is that there will be multiple branches for you to manage. The upside is that you use branches as developers would use them.\n\nCreating and Checking Out a Feature Branch\nYou can create and checkout a branch in one step.\ngit checkout -b &lt;branch-name&gt;\n\n\nSetting the Upstream for Pushing Local Files to the Remote Repository\ngit push --set-upstream &lt;branch-name&gt;"
  },
  {
    "objectID": "project/06_using_git_with_branches.html#the-git-command-process",
    "href": "project/06_using_git_with_branches.html#the-git-command-process",
    "title": "Git Branch Merging Tutorial",
    "section": "The Git Command Process",
    "text": "The Git Command Process\nAlthough have files created on your local branch (on your computer) of the repository, those files do not exist on the remote branch (on GitHub) until you put them there. Moreover, your team members cannot access them unless you put them on GitHub. Sorry, there is no using flash drives and emailing files. Data Science teams stage, commit, and push files, fetch and merge branches, and live happily ever after if you practice.\n\nStaging Files\nStage the path to the file and file, spelled correctly.\ngit add &lt;file-path-and-file-name&gt;\n\n\nCommitting Files with Messages (for you and others)\ngit commit -m \"clear message and file-name\"\n\n\nPushing Changes from your Local Branch to your Remote Branch on GitHub\ngit push"
  },
  {
    "objectID": "project/06_using_git_with_branches.html#a-collaboration-example",
    "href": "project/06_using_git_with_branches.html#a-collaboration-example",
    "title": "Git Branch Merging Tutorial",
    "section": "A collaboration Example",
    "text": "A collaboration Example\nBill and Jane are collaborating on a project hosted on GitHub. Bill is working on a branch named bill, and Jane is working on a branch named jane. Jane has made changes to her branch and pushed them to the remote repository. Bill wants to incorporate Jane’s changes into his local bill branch without checking out or creating a local version of the jane branch."
  },
  {
    "objectID": "project/06_using_git_with_branches.html#scenario-overview",
    "href": "project/06_using_git_with_branches.html#scenario-overview",
    "title": "Git Branch Merging Tutorial",
    "section": "Scenario Overview",
    "text": "Scenario Overview\n\nThe remote repository is hosted on GitHub.com.\nJane is working on her local branch named jane.\nBill is working on his local branch named bill.\nJane pushes her changes from her local jane branch to the remote jane branch on GitHub.\nBill needs Jane’s changes in order to work on his feature but Bill does not have a local branch jane, nor does he want to touch her branch.\nBill does not touch, edit, modify, delete, or do anything with Jane’s files.\nSam enters the collaboration space"
  },
  {
    "objectID": "project/06_using_git_with_branches.html#verify-remote-repository",
    "href": "project/06_using_git_with_branches.html#verify-remote-repository",
    "title": "Git Branch Merging Tutorial",
    "section": "Verify Remote Repository",
    "text": "Verify Remote Repository\nThe only way for collaboration to work is to ensure everyone is connected properly to the remote repository. You can check the location with git remote -v. You will see the url for fetching and pushing.\ngit remote -v"
  },
  {
    "objectID": "project/06_using_git_with_branches.html#solution",
    "href": "project/06_using_git_with_branches.html#solution",
    "title": "Git Branch Merging Tutorial",
    "section": "Solution",
    "text": "Solution\nBill will use Git commands to fetch Jane’s remote branch, merge those changes into his local bill branch, and update the remote bill branch on GitHub.\n\nSteps for Merging a Remote Branch into a Local Branch\nThese steps assume that Jane has informed Bill and other team members that she has completed her feature (e.g., .R script file, .Rds processed data file or aggregated/summarized data frame (no .csv’s), .png plot, or something else) and she has pushed them to her remote branch on GitHub.\n\nStep 1: Fetch the Remote Branch\nThe first step is for Bill to fetch Jane’s remote branch. This downloads the changes in jane from the remote repository to Bill’s local machine without creating a local branch for jane.\ngit fetch origin jane\nYou should see a terminal message like:\nFrom https://github.com/slicesofdata/&lt;your-team-repo&gt;\n * branch            jane      -&gt; FETCH_HEAD\nWarning: Once you fetch a teammate’s branch, you will see files that you have already fetched and merged and the date corresponding to the file will update accordingly. The file you see, however, will not reflect the changes. Similarly, new files that you have not fetched previously will not appear in the Files tab in RStudio. In order changes to these files, you need to perform the merge for the content update to take effect.\n\n\nStep 2: Ensure You’re on the Correct Local Branch\nBefore merging any changes, Bill needs to ensure he’s on his local branch bill. He can check the current branch with:\ngit branch\nThis will show a list of local branches, and the current branch will be highlighted with an asterisk (*).\nIf Bill is not on the bill branch, he can switch to it with:\ngit checkout bill\n\n\nStep 3: Merge the Remote Branch into the Local Branch\nOnce Bill is on his local bill branch, he can merge the changes from the remote jane branch into his local branch:\ngit merge origin/jane\nThis command merges the changes from origin jane (the remote version of Jane’s branch) into the current branch (Bill’s local bill branch).\n$ git merge origin/jane\nMerge made by the 'ort' strategy.\n src/figs/jane-revenue-by-quarter-bar-plot.R | 8 ++\n 1 file changed, 8 insertions(+)\n create mode 100644 src/figs/jane-revenue-by-quarter-bar-plot.R\nAlso, as long as Bill does not create a jane branch locally, he will follow the same steps next time he needs to fetch and merge Jane’s pushes to the remote branch.\ngit fetch origin jane\ngit merge origin/jane\nWarning: Do not create a local branch for your teammate’s branches and the above steps will remain the same.\n\n\nStep 4: Handle Merge Conflicts\nAs mentioned previously, naming your files with intention will reduce naming files with the same name. If you have duplicate name files, you will likely have merge conflicts. You do not want to deal with these as they will cause you and I extra time and headaches.\nTips for inexperienced Git users to avoid merge conflicts:\n\nName your files with your initials (e.g., gc-revenue-by-quarter-bar-plot.R), and; this will limit confusion about who created the file\nDo not create another team member’s branch on your local system\nDo not touch another team member’s files; no editing, no overwriting\nRead/Source files by\n\nIf there are any merge conflicts (i.e., changes in Jane’s branch that conflict with Bill’s local changes), Git will pause the merge and prompt Bill to resolve the conflicts manually.\n\n\n\n\nStep 5: Commit the Merge\nThe merge using git merge origin/jane also automatically stages/adds the changes that occurred as part of the merge. Thus, they need to be committed.\nBill can not commit the merge (assuming there are no conflicts or they have been resolved): \ngit commit -m \"merged remote jane into local bill\"\n\n\nStep 6: Push the Updated Local Branch to the Remote Repository\nOnce committed, Bill needs to push his updated local bill branch (now with Jane’s changes) to the remote repository:\ngit push origin bill\nAlthough git push would work just fine, adding origin bill leaves no ambiguity about the command’s behavior and ensures that the remote bill branch on GitHub is updated with the changes from (now) both Bill’s and Jane’s work."
  },
  {
    "objectID": "project/06_using_git_with_branches.html#more-than-2-collaborators-more-than-2-branches",
    "href": "project/06_using_git_with_branches.html#more-than-2-collaborators-more-than-2-branches",
    "title": "Git Branch Merging Tutorial",
    "section": "More than 2 Collaborators, More than 2 Branches",
    "text": "More than 2 Collaborators, More than 2 Branches\nJane is excited about the project and is making great progress. She updates a current code file, creates two more files, stages, commits, and pushes the changes to the remote repo.\nSam enters the collaboration with a sam branch. After Jane has made these recent changes, Sam performs a fetch and merge of Jane’s branch exactly as did Bill. The difference is that Sam has a more recent version of one file and has two more files from Jane’s branch than does Bill.\nSam now wants to fetch and merge Bill’s remote branch with his local branch. Although Bill has older versions of Jane’s files in his branch, Sam will retain versions of the files fetched from Jane’s remote branch. This occurs because Git uses a three-way merge algorithm for comparing the common ancestor of both branches and applies the most recent changes based on commit timestamps.\nWarning: If you are not vigilant and you modify a teammate’s file on your branch, you may experience problems. For example, If Bill modifies code on the same lines in Jane’s file, Git will flag a merge conflict. Git will not automatically choose which version of the file to keep. You will need to do this manually."
  },
  {
    "objectID": "resources/tools.html#websites",
    "href": "resources/tools.html#websites",
    "title": "Tools for Foundations of Data Science",
    "section": "Websites",
    "text": "Websites\n\nPractice Coding in R on Posit Cloud\n\nhttps://posit.cloud/learn/primers/"
  },
  {
    "objectID": "resources/tools.html#books",
    "href": "resources/tools.html#books",
    "title": "Tools for Foundations of Data Science",
    "section": "Books",
    "text": "Books\n\nLots of alternative books https://www.bigbookofr.com/data-visualization.html"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html",
    "title": "R, RStudio, & Rmarkdown",
    "section": "",
    "text": "code or programs you write execute in real time\nby he R interpreter that translates your code\ncode does not need to be compiled prior to being executed\n\n\n\n\n\n\n\nhttps://en.wikipedia.org/wiki/Functional_programming\nprograms are constructed by applying and composing functions\nfunctions:\n\nmean()\ndplyr::summarize()\n\n\n\n\n\n\n\n\nnumeric objects (e.g., 2024, 21.2)\nstrings/character objects:\n\ncomposed of letters\nenclosed by quotes (e.g., \"Sam\", \"Male\", \"21\")\n\nvector objects:\n\ncollections of objects (e.g., c(\"18\", \"23\", \"20\"))\n\ndata frames:\n\ncollections of vectors\n\n\n\n\n\n\n\n\nwe assign objects to names/names to objects\n\nages &lt;- c(\"18\", \"23\", \"20\")\n\nwe perform functions on objects:\n\nas.numeric(ages)\noften by assigning or reassigning:\n\nages &lt;- as.numeric(ages)\n\n\n\n\n\n\n\n\n\nwe inspect object contents\n\nages\nand get something returned: [1] 18 23 20\n\nwe perform more functions on objects:\n\nmean(ageas.numeric(ages))\n[1] 20.33333\n\nwe model data frames\n\n\n\n\n\n\n\n\nfind the Console\nfind the Terminal\nfind ‘environment’ in pane\nfind ‘history’ in pane\nfind ‘help’ in pane\nfind ‘files’ in pane\nfind ‘plots’ in pane\n\n\n\n\n\n\n\n\nyear &lt;- 2024\n\n\n\n\ncode\nyear &lt;- 2024\n\n\n\nassign objects to names using &lt;-, not =\n\n\n\n\n\n\n\n\nages &lt;- c(18, 22, 24)\n\n\n\n\ncode\nages &lt;- c(18, 22, 24)\n\n\n\n[1] 18 22 24"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#r-is-an-interpreted-language",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#r-is-an-interpreted-language",
    "title": "R, RStudio, & Rmarkdown",
    "section": "",
    "text": "code or programs you write execute in real time\nby he R interpreter that translates your code\ncode does not need to be compiled prior to being executed"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#r-involves-functional-programming",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#r-involves-functional-programming",
    "title": "R, RStudio, & Rmarkdown",
    "section": "",
    "text": "https://en.wikipedia.org/wiki/Functional_programming\nprograms are constructed by applying and composing functions\nfunctions:\n\nmean()\ndplyr::summarize()"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#some-basics",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#some-basics",
    "title": "R, RStudio, & Rmarkdown",
    "section": "",
    "text": "numeric objects (e.g., 2024, 21.2)\nstrings/character objects:\n\ncomposed of letters\nenclosed by quotes (e.g., \"Sam\", \"Male\", \"21\")\n\nvector objects:\n\ncollections of objects (e.g., c(\"18\", \"23\", \"20\"))\n\ndata frames:\n\ncollections of vectors"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#some-basics-cont.",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#some-basics-cont.",
    "title": "R, RStudio, & Rmarkdown",
    "section": "",
    "text": "we assign objects to names/names to objects\n\nages &lt;- c(\"18\", \"23\", \"20\")\n\nwe perform functions on objects:\n\nas.numeric(ages)\noften by assigning or reassigning:\n\nages &lt;- as.numeric(ages)"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#some-basics-cont.-1",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#some-basics-cont.-1",
    "title": "R, RStudio, & Rmarkdown",
    "section": "",
    "text": "we inspect object contents\n\nages\nand get something returned: [1] 18 23 20\n\nwe perform more functions on objects:\n\nmean(ageas.numeric(ages))\n[1] 20.33333\n\nwe model data frames"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#open-rstudio",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#open-rstudio",
    "title": "R, RStudio, & Rmarkdown",
    "section": "",
    "text": "find the Console\nfind the Terminal\nfind ‘environment’ in pane\nfind ‘history’ in pane\nfind ‘help’ in pane\nfind ‘files’ in pane\nfind ‘plots’ in pane"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#write-some-code-in-the-r-console",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#write-some-code-in-the-r-console",
    "title": "R, RStudio, & Rmarkdown",
    "section": "",
    "text": "year &lt;- 2024\n\n\n\n\ncode\nyear &lt;- 2024\n\n\n\nassign objects to names using &lt;-, not ="
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#write-more-code-in-the-r-console",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#write-more-code-in-the-r-console",
    "title": "R, RStudio, & Rmarkdown",
    "section": "",
    "text": "ages &lt;- c(18, 22, 24)\n\n\n\n\ncode\nages &lt;- c(18, 22, 24)\n\n\n\n[1] 18 22 24"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#rstudio",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#rstudio",
    "title": "R, RStudio, & Rmarkdown",
    "section": "RStudio",
    "text": "RStudio\n\nIDE for using R\nmake for a better coding experience\nlots of extras\n\nbetter UI, markdown, Terminal, Git, code snippets"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#r-markdown",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#r-markdown",
    "title": "R, RStudio, & Rmarkdown",
    "section": "R Markdown",
    "text": "R Markdown\n\n\nMarkdown is a lightweight markup language used for adding formatting elements to plain text text\nR Markdown is a markdown language create for R and RStudio\nAllows you to dress up text, embed and render code, reference hyperlinks, etc. within a written document\nLibraries like {rmarkdown} and {knitr} help you build HTML, pdf, and Word documents that update automatically with new data"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#create-an-r-markdown-file",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#create-an-r-markdown-file",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Create an R Markdown File",
    "text": "Create an R Markdown File\n\n\nCreate directory/folder named: fods24\nFile &gt; New File &gt; R Markdown\nName it: my_first_markdown.Rmd\nSave in: /fods24\nNOTE: Directories will be addressed for next week!"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#write-some-text-in-the-r-markdown-file",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#write-some-text-in-the-r-markdown-file",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Write some text in the R Markdown File",
    "text": "Write some text in the R Markdown File\n\nMy name is X and the year I start learning R is Y."
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#dressing-up-text",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#dressing-up-text",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Dressing up Text",
    "text": "Dressing up Text\n\n\nItalics: wrap text in *\n\n*italics*\n\nBold: wrap text in **\n\n**bold**\n\nBold Italics: wrap text in ***\n\n***bold italics***"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#insert-and-embed-code-block",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#insert-and-embed-code-block",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Insert and Embed Code Block",
    "text": "Insert and Embed Code Block\n\n\n```{r}\n\n```\n\n\n\n\nWindows: CLTR+ALT+I\nMac: COMMAND+ALT+I"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#create-code-in-block-assign-value-to-year",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#create-code-in-block-assign-value-to-year",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Create Code in Block: Assign value to year ",
    "text": "Create Code in Block: Assign value to year \n\n\n```{r}\nyear &lt;- 2024\n```\n\n\n\n\ncode\nyear &lt;- 2024"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#code-block-settings",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#code-block-settings",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Code block settings",
    "text": "Code block settings"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#create-a-code-block-write-some-code",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#create-a-code-block-write-some-code",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Create a code block + write some code",
    "text": "Create a code block + write some code\n\n\n```{r}\nband &lt;- \"your favorite band\"\nstate &lt;- \"the state in which you grew up\"\nname &lt;- \"your name\"\n```"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#embed-code-in-line-inside-text",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#embed-code-in-line-inside-text",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Embed code in-line (inside text)",
    "text": "Embed code in-line (inside text)\n\n\nIf you have an object in R\nYou can render the object in text\nAnd dress up the text"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#embed-code-in-line-inside-text-1",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#embed-code-in-line-inside-text-1",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Embed code in-line (inside text)",
    "text": "Embed code in-line (inside text)\n\nIf you have an object in R\nYou can render the object in text\nAnd dress up the text\n\n\n\nThe year is `r year`!"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#embed-code-in-line-inside-text-2",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#embed-code-in-line-inside-text-2",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Embed code in-line (inside text)",
    "text": "Embed code in-line (inside text)\n\nIf you have an object in R\nYou can render the object in text\nAnd dress up the text\n\n\n\nThe year is `r year`!\n\n\nThe year is 2024!"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#modify-your-text-in-the-r-markdown-file",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#modify-your-text-in-the-r-markdown-file",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Modify your text in the R Markdown File",
    "text": "Modify your text in the R Markdown File\n\n\nmake the year change by using inline code\nmake sure your inline code is after you assign the object"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#add-header-sections-and-subsections-using",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#add-header-sections-and-subsections-using",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Add header sections and subsections using #",
    "text": "Add header sections and subsections using #\n# About me\n## My favorite band\n### My favorite band from the 1990s"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#insert-hyperlinks",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#insert-hyperlinks",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Insert hyperlinks",
    "text": "Insert hyperlinks\n\n\n[message](url)\n[cheatsheet](https://gabrielcook.xyz/fods24/cheatsheets/rmarkdown-2.0.pdf)\ncheatsheet"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#knitting-r-markdown-files",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#knitting-r-markdown-files",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Knitting R Markdown Files",
    "text": "Knitting R Markdown Files\n\n\nAs HTML\nAs pdf\nAs Word"
  },
  {
    "objectID": "slides/01_intro_rstudio_rmarkdown_slides.html#locate-the-html-file",
    "href": "slides/01_intro_rstudio_rmarkdown_slides.html#locate-the-html-file",
    "title": "R, RStudio, & Rmarkdown",
    "section": "Locate the HTML file ",
    "text": "Locate the HTML file \n\nmy_first_markdown.html"
  },
  {
    "objectID": "slides/02_git.html",
    "href": "slides/02_git.html",
    "title": "Git and GitHub",
    "section": "",
    "text": "What is version control?\n\nProject backup\nSee specific changes inside files\nUndo changes (time machine)\n\nVersion Control Summary Video"
  },
  {
    "objectID": "slides/02_git.html#version-control",
    "href": "slides/02_git.html#version-control",
    "title": "Git and GitHub",
    "section": "",
    "text": "What is version control?\n\nProject backup\nSee specific changes inside files\nUndo changes (time machine)\n\nVersion Control Summary Video"
  },
  {
    "objectID": "slides/02_git.html#version-control-git-workflow-basics",
    "href": "slides/02_git.html#version-control-git-workflow-basics",
    "title": "Git and GitHub",
    "section": "Version Control: Git Workflow Basics",
    "text": "Version Control: Git Workflow Basics\nThere are three main parts to Git Workflow:\n\n\nVersion control for files (not empty directories)\nMake local changes (in your working directory)\nStage changes (in your staging directory)\nCommit changes (to apply them for pushing to your remote repository)\nVersion Control Workflow Basics\nOther Parts\n\nPush for sending commits to GitHub\nMerge for merging branches (i.e., to incorporate your edits into main)"
  },
  {
    "objectID": "slides/02_git.html#git-image-version",
    "href": "slides/02_git.html#git-image-version",
    "title": "Git and GitHub",
    "section": "Git: Image Version",
    "text": "Git: Image Version\nunderstanding git through images"
  },
  {
    "objectID": "slides/02_git.html#connecting-git-to-github-the-rstudio-terminal",
    "href": "slides/02_git.html#connecting-git-to-github-the-rstudio-terminal",
    "title": "Git and GitHub",
    "section": "Connecting Git to GitHub: The RStudio Terminal",
    "text": "Connecting Git to GitHub: The RStudio Terminal\n\n\nConfigure Git and GitHub in RStudio Terminal\nCreate token\nSet token\nCan use the RStudio Gui (clunky though)"
  },
  {
    "objectID": "slides/02_git.html#configuring-git-and-github-with-usethis",
    "href": "slides/02_git.html#configuring-git-and-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Configuring Git and GitHub with {usethis}",
    "text": "Configuring Git and GitHub with {usethis}\n\nusethis::use_git_config(user.name = \"janegit\", \n                        user.email = \"jane_git@gitrdone.com\"\n                        )"
  },
  {
    "objectID": "slides/02_git.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "href": "slides/02_git.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Creating a Personal Access Token (PAT) for GitHub with {usethis}",
    "text": "Creating a Personal Access Token (PAT) for GitHub with {usethis}\n\n\nusethis::create_github_token()\nCreate token and copy to your clipboard"
  },
  {
    "objectID": "slides/02_git.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "href": "slides/02_git.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "title": "Git and GitHub",
    "section": "Setting your Git Credentials (using PAT) with {gitcreds}",
    "text": "Setting your Git Credentials (using PAT) with {gitcreds}\n\n\ngitcreds::gitcreds_set()\nChoose option to either set or replace\nAt ? Enter new password or token, paste PAT to set\ngh::gh_whoami() to check if set"
  },
  {
    "objectID": "slides/02_git.html#some-basic-commands",
    "href": "slides/02_git.html#some-basic-commands",
    "title": "Git and GitHub",
    "section": "Some Basic Commands",
    "text": "Some Basic Commands\n\nFork: to make a copy of a repo in your own GitHub account\nClone: make a copy of the your GitHub repo on your local computer. * copies a remote repo to create a local repo with a remote called origin automatically set up."
  },
  {
    "objectID": "slides/02_git.html#some-basic-commands-cont.",
    "href": "slides/02_git.html#some-basic-commands-cont.",
    "title": "Git and GitHub",
    "section": "Some Basic Commands (Cont.)",
    "text": "Some Basic Commands (Cont.)\n\nPull: incorporates changes into your repo from remote\nAdd: adds snapshots of your changes to the “Staging” area.\nCommit: takes the files as they are in your staging area and stores a snap shot of your files (changes) permanently in your Git directory\nPush: uploads your files (changes) to the remote repo\nStatus: checks the status of a repo changes, etc.\nMerge: incorporates changes into the branch you are on.\nPull Request: By “issuing a pull request” to the owner of the upstream repo, you are requesting that your changes be pulled into their repo (accept your changes/work)."
  },
  {
    "objectID": "slides/02_git.html#making-local-file-changes-committing-and-pushing-to-github",
    "href": "slides/02_git.html#making-local-file-changes-committing-and-pushing-to-github",
    "title": "Git and GitHub",
    "section": "Making Local File Changes, Committing, and Pushing to GitHub",
    "text": "Making Local File Changes, Committing, and Pushing to GitHub\n\n\nMake a change to a file, save to local computer\nCheck status of project for changes\nAdd/Stage change\nCommit change(s)\nPush changes\nPull pulls changes down from repo (downloads and merges changes)\nFetch downloads new data (does not change your working copy)"
  },
  {
    "objectID": "slides/02_git.html#checking-the-status-of-local-file-changes",
    "href": "slides/02_git.html#checking-the-status-of-local-file-changes",
    "title": "Git and GitHub",
    "section": "Checking the Status of Local File Changes",
    "text": "Checking the Status of Local File Changes\nAt the Terminal in RStudio\n\n$ git status"
  },
  {
    "objectID": "slides/02_git.html#shared-repository-workflow",
    "href": "slides/02_git.html#shared-repository-workflow",
    "title": "Git and GitHub",
    "section": "Shared Repository Workflow",
    "text": "Shared Repository Workflow\n\n\nPull recent changes from main: git pull\nMake changes to files\nStage your changes: git add\nCommit changes locally: git commit -m \"description of changes\"\nUpload your new the changes to GitHub: git push"
  },
  {
    "objectID": "slides/02_git.html#staging-changes-adding-changes",
    "href": "slides/02_git.html#staging-changes-adding-changes",
    "title": "Git and GitHub",
    "section": "Staging Changes (Adding Changes)",
    "text": "Staging Changes (Adding Changes)\n\n\nStaging and Committing\n\nUntracked vs. tracked files\nTo have tracked by Git, you need to add"
  },
  {
    "objectID": "slides/02_git.html#staging-a-specific-change",
    "href": "slides/02_git.html#staging-a-specific-change",
    "title": "Git and GitHub",
    "section": "Staging a Specific Change",
    "text": "Staging a Specific Change\n\n\n$ git add &lt;file&gt;... such that &lt;file&gt; refers to the file name\nfile might be in a directory, e.g., r/\n$ git add r/yourname.R\nTab to auto-complete, e.g., git add r/you{TAB}"
  },
  {
    "objectID": "slides/02_git.html#staging-all-changes",
    "href": "slides/02_git.html#staging-all-changes",
    "title": "Git and GitHub",
    "section": "Staging All Changes",
    "text": "Staging All Changes\n\n$ git add ."
  },
  {
    "objectID": "slides/02_git.html#committing-the-changes",
    "href": "slides/02_git.html#committing-the-changes",
    "title": "Git and GitHub",
    "section": "Committing the Change(s)",
    "text": "Committing the Change(s)\n\n\ngit commit is used to commit the changes\nadd -m to tell git you want a message (e.g., \"my message here\")\n\n$ git commit -m \"added my first .R file\""
  },
  {
    "objectID": "slides/02_git.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "href": "slides/02_git.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Push (publish) the change(s) from your branch to the remote repository",
    "text": "Push (publish) the change(s) from your branch to the remote repository\n\n\n$ git push\nPushing changes"
  },
  {
    "objectID": "slides/02_git.html#pulls-changes-from-the-remote-repository",
    "href": "slides/02_git.html#pulls-changes-from-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Pulls change(s) from the remote repository",
    "text": "Pulls change(s) from the remote repository\n\n\n$ git pull\nIf you make changes that other will need, let them know to pull"
  },
  {
    "objectID": "slides/02_git.html#git-client-video-tutorials",
    "href": "slides/02_git.html#git-client-video-tutorials",
    "title": "Git and GitHub",
    "section": "Git Client Video Tutorials",
    "text": "Git Client Video Tutorials\n\n\nGitKraken Git Client examples\nfor more, see: this video"
  },
  {
    "objectID": "slides/02_git.html#videos-of-many-things-you-can-do",
    "href": "slides/02_git.html#videos-of-many-things-you-can-do",
    "title": "Git and GitHub",
    "section": "Videos of many things you can do",
    "text": "Videos of many things you can do\nIf interested, see gittower YouTube"
  },
  {
    "objectID": "slides/03_functions_slides.html",
    "href": "slides/03_functions_slides.html",
    "title": "Functions, Parameters, and Arguments",
    "section": "",
    "text": "An object as a sort of container\nContainers hold different things\n\n\n\n\n\n\nnumeric objects: representing numeric information (e.g., one’s age)\ncharacter objects: representing character information (e.g., one’s name or race)\nvector objects: representing more than one numeric object (e.g., ages of participants)\ndata frame objects: containing vectors of data (e.g., column variables and row instances of data)\nfunction objects: that accept one object and return an other object (e.g., the mean of numeric vector)\n\n\n\n\n\n\n\nObjects need names\nObtained through assignment\n\nname is assigned an object; or\nobject is set to name\n\nAssignment operator &lt;-\n\nex: age &lt;- 22\nex: age &lt;- as.numeric(c(\"22\", \"25\", \"19\"))\n\n\n\n\n\n\n\nFunctions are special objects which contain statements for carrying out operations\n\nc() or Hmisc::Cs(): to combine elements into a vector\nmean(): to compute the mean of a numeric vector\nsource(): for reading/executing R code\ndplyr::mutate(): for creating variables in data frames\nrio::import() or readr::read_csv(): for reading data files\nreadRDS(): for reading compressed data files\n\n\n\n\n\n5 terms concepts to know:\n\n\nname (created by assignment operator &lt;-)\ndefinition (code statements or instructions for its usage)\narguments (optional variables that specify the function’s operation)\nfunction call (e.g., execution of a function)\nreturned object (value returned from the executed function)\n\n\n\n\n\n\n\nmy_function &lt;- function() {\n\n    statements/instructions to do something\n\n    \n    return(result of instructions)\n\n}\n\n\n\n\n\n\n\n\nget_years_since_birth &lt;- function(dob) {\n  if (!hasArg(dob)) {\n      message(\"Error: dob missing/no argument provided\")\n    } \n  else {\n    # make string a data\n    dob = lubridate::as_date(dob) \n    # obtain the difference in time in days\n    diff = difftime(time1 = Sys.Date(), time2 = dob, units = \"days\")\n    # create age based on days in year\n    age = as.numeric(diff / 365.25)\n    # return the age in years, truncated \n    return(trunc(age))\n  }\n}\n\n\n\n\n\n\n\n{dplyr}: for wrangling data frames\n{ggplot2}: for plotting data\n{tidyverse}: for loading all libraries in the tidyverse ecosystem\n{easystats}: for loading all libraries in the easystats ecosystem\n\n\n\n\n\n\n\nLoading all functions:\n\nlibrary(dplyr)\n\nLoading order matters: Function of the same name will overwrite others\n\n\n\n\n\n\n\nIf loaded:\n\nmutate() (from {dplyr})\n\nIf not loaded:\n\neeptools::age_calc(): for calculating age based on a date\n:: calls ensures choice (duplicate function names in different libraries)"
  },
  {
    "objectID": "slides/03_functions_slides.html#some-object-types",
    "href": "slides/03_functions_slides.html#some-object-types",
    "title": "Functions, Parameters, and Arguments",
    "section": "",
    "text": "numeric objects: representing numeric information (e.g., one’s age)\ncharacter objects: representing character information (e.g., one’s name or race)\nvector objects: representing more than one numeric object (e.g., ages of participants)\ndata frame objects: containing vectors of data (e.g., column variables and row instances of data)\nfunction objects: that accept one object and return an other object (e.g., the mean of numeric vector)"
  },
  {
    "objectID": "slides/03_functions_slides.html#object-assignment",
    "href": "slides/03_functions_slides.html#object-assignment",
    "title": "Functions, Parameters, and Arguments",
    "section": "",
    "text": "Objects need names\nObtained through assignment\n\nname is assigned an object; or\nobject is set to name\n\nAssignment operator &lt;-\n\nex: age &lt;- 22\nex: age &lt;- as.numeric(c(\"22\", \"25\", \"19\"))"
  },
  {
    "objectID": "slides/03_functions_slides.html#function-objects",
    "href": "slides/03_functions_slides.html#function-objects",
    "title": "Functions, Parameters, and Arguments",
    "section": "",
    "text": "Functions are special objects which contain statements for carrying out operations\n\nc() or Hmisc::Cs(): to combine elements into a vector\nmean(): to compute the mean of a numeric vector\nsource(): for reading/executing R code\ndplyr::mutate(): for creating variables in data frames\nrio::import() or readr::read_csv(): for reading data files\nreadRDS(): for reading compressed data files"
  },
  {
    "objectID": "slides/03_functions_slides.html#function-characteristics",
    "href": "slides/03_functions_slides.html#function-characteristics",
    "title": "Functions, Parameters, and Arguments",
    "section": "",
    "text": "5 terms concepts to know:\n\n\nname (created by assignment operator &lt;-)\ndefinition (code statements or instructions for its usage)\narguments (optional variables that specify the function’s operation)\nfunction call (e.g., execution of a function)\nreturned object (value returned from the executed function)"
  },
  {
    "objectID": "slides/03_functions_slides.html#function-statements-without-parameterargument",
    "href": "slides/03_functions_slides.html#function-statements-without-parameterargument",
    "title": "Functions, Parameters, and Arguments",
    "section": "",
    "text": "my_function &lt;- function() {\n\n    statements/instructions to do something\n\n    \n    return(result of instructions)\n\n}"
  },
  {
    "objectID": "slides/03_functions_slides.html#function-example-with-parameterargument",
    "href": "slides/03_functions_slides.html#function-example-with-parameterargument",
    "title": "Functions, Parameters, and Arguments",
    "section": "",
    "text": "get_years_since_birth &lt;- function(dob) {\n  if (!hasArg(dob)) {\n      message(\"Error: dob missing/no argument provided\")\n    } \n  else {\n    # make string a data\n    dob = lubridate::as_date(dob) \n    # obtain the difference in time in days\n    diff = difftime(time1 = Sys.Date(), time2 = dob, units = \"days\")\n    # create age based on days in year\n    age = as.numeric(diff / 365.25)\n    # return the age in years, truncated \n    return(trunc(age))\n  }\n}"
  },
  {
    "objectID": "slides/03_functions_slides.html#functions-in-libraries",
    "href": "slides/03_functions_slides.html#functions-in-libraries",
    "title": "Functions, Parameters, and Arguments",
    "section": "",
    "text": "{dplyr}: for wrangling data frames\n{ggplot2}: for plotting data\n{tidyverse}: for loading all libraries in the tidyverse ecosystem\n{easystats}: for loading all libraries in the easystats ecosystem"
  },
  {
    "objectID": "slides/03_functions_slides.html#loadingimporting-functions-from-libraries",
    "href": "slides/03_functions_slides.html#loadingimporting-functions-from-libraries",
    "title": "Functions, Parameters, and Arguments",
    "section": "",
    "text": "Loading all functions:\n\nlibrary(dplyr)\n\nLoading order matters: Function of the same name will overwrite others"
  },
  {
    "objectID": "slides/03_functions_slides.html#calling-functions-from-libraries",
    "href": "slides/03_functions_slides.html#calling-functions-from-libraries",
    "title": "Functions, Parameters, and Arguments",
    "section": "",
    "text": "If loaded:\n\nmutate() (from {dplyr})\n\nIf not loaded:\n\neeptools::age_calc(): for calculating age based on a date\n:: calls ensures choice (duplicate function names in different libraries)"
  }
]